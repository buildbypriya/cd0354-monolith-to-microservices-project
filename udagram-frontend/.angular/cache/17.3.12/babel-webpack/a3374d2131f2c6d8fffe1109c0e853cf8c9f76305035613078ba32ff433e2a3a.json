{"ast":null,"code":"import _asyncToGenerator from \"/Users/priyasingh/Desktop/aws-udacity-projects/cd0354-monolith-to-microservices-project/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_HOST = environment.apiHost;\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  static handleError(error) {\n    alert(error.message);\n  }\n  static extractData(res) {\n    const body = res;\n    return body || {};\n  }\n  setAuthToken(token) {\n    this.token = token;\n    this.httpOptions.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `jwt ${token}`\n    });\n  }\n  get(endpoint) {\n    const url = `${API_HOST}${endpoint}`;\n    const req = this.http.get(url, this.httpOptions).pipe(map(ApiService.extractData));\n    return req.toPromise().catch(e => {\n      ApiService.handleError(e);\n      throw e;\n    });\n  }\n  post(endpoint, data) {\n    const url = `${API_HOST}${endpoint}`;\n    return this.http.post(url, data, this.httpOptions).toPromise().catch(e => {\n      ApiService.handleError(e);\n      throw e;\n    });\n  }\n  upload(endpoint, file, payload) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Get signed URL with JWT auth\n        const signedUrlResponse = yield _this.get(`${endpoint}/signed-url/${file.name}`);\n        const signed_url = signedUrlResponse.url;\n        // Create a simple PUT request with minimal headers\n        const uploadResponse = yield lastValueFrom(_this.http.put(signed_url, file, {\n          headers: new HttpHeaders({\n            'Content-Type': file.type\n          }),\n          observe: 'response'\n        }));\n        if (uploadResponse.status === 200) {\n          // If upload successful, post the metadata\n          return yield _this.post(endpoint, payload);\n        } else {\n          throw new Error('Upload failed');\n        }\n      } catch (error) {\n        console.error('Upload error:', error);\n        throw error;\n      }\n    })();\n  }\n  static {\n    this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","environment","map","lastValueFrom","API_HOST","apiHost","ApiService","constructor","http","httpOptions","headers","handleError","error","alert","message","extractData","res","body","setAuthToken","token","get","endpoint","url","req","pipe","toPromise","catch","e","post","data","upload","file","payload","_this","_asyncToGenerator","signedUrlResponse","name","signed_url","uploadResponse","put","type","observe","status","Error","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/priyasingh/Desktop/aws-udacity-projects/cd0354-monolith-to-microservices-project/udagram-frontend/src/app/api/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest, HttpEvent } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map, catchError } from 'rxjs/operators';\nimport { lastValueFrom } from 'rxjs';\n\nconst API_HOST = environment.apiHost;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n  };\n\n  token: string;\n\n  constructor(private http: HttpClient) {\n  }\n\n  static handleError(error: Error) {\n    alert(error.message);\n  }\n\n  static extractData(res: HttpEvent<any>) {\n    const body = res;\n    return body || { };\n  }\n\n  setAuthToken(token) {\n    this.token = token;\n    this.httpOptions.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `jwt ${token}`\n    });\n  }\n\n  get(endpoint): Promise<any> {\n    const url = `${API_HOST}${endpoint}`;\n    const req = this.http.get(url, this.httpOptions).pipe(map(ApiService.extractData));\n\n    return req\n            .toPromise()\n            .catch((e) => {\n              ApiService.handleError(e);\n              throw e;\n            });\n  }\n\n  post(endpoint, data): Promise<any> {\n    const url = `${API_HOST}${endpoint}`;\n    return this.http.post<HttpEvent<any>>(url, data, this.httpOptions)\n            .toPromise()\n            .catch((e) => {\n              ApiService.handleError(e);\n              throw e;\n            });\n  }\n\n  async upload(endpoint: string, file: File, payload: any): Promise<any> {\n    try {\n      // Get signed URL with JWT auth\n      const signedUrlResponse = await this.get(`${endpoint}/signed-url/${file.name}`);\n      const signed_url = signedUrlResponse.url;\n\n      // Create a simple PUT request with minimal headers\n      const uploadResponse = await lastValueFrom(\n        this.http.put(signed_url, file, {\n          headers: new HttpHeaders({\n            'Content-Type': file.type\n          }),\n          observe: 'response'\n        })\n      );\n\n      if (uploadResponse.status === 200) {\n        // If upload successful, post the metadata\n        return await this.post(endpoint, payload);\n      } else {\n        throw new Error('Upload failed');\n      }\n    } catch (error) {\n      console.error('Upload error:', error);\n      throw error;\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}