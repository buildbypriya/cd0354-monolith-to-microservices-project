{"ast":null,"code":"import _asyncToGenerator from \"/Users/priyasingh/Desktop/aws-udacity-projects/cd0354-monolith-to-microservices-project/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport { lastValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_HOST = environment.apiHost;\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    static handleError(error) {\n      alert(error.message);\n    }\n    static extractData(res) {\n      const body = res;\n      return body || {};\n    }\n    setAuthToken(token) {\n      this.token = token;\n      this.httpOptions.headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `jwt ${token}`\n      });\n    }\n    get(endpoint) {\n      const url = `${API_HOST}${endpoint}`;\n      const req = this.http.get(url, this.httpOptions).pipe(map(ApiService.extractData));\n      return req.toPromise().catch(e => {\n        ApiService.handleError(e);\n        throw e;\n      });\n    }\n    post(endpoint, data) {\n      const url = `${API_HOST}${endpoint}`;\n      return this.http.post(url, data, this.httpOptions).toPromise().catch(e => {\n        ApiService.handleError(e);\n        throw e;\n      });\n    }\n    upload(endpoint, file, payload) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Get signed URL with JWT auth\n          const signedUrlResponse = yield _this.get(`${endpoint}/signed-url/${file.name}`);\n          const signed_url = signedUrlResponse.url;\n          // Create a simple PUT request with minimal headers\n          const uploadResponse = yield lastValueFrom(_this.http.put(signed_url, file, {\n            headers: new HttpHeaders({\n              'Content-Type': file.type\n            }),\n            observe: 'response'\n          }));\n          if (uploadResponse.status === 200) {\n            // If upload successful, post the metadata\n            return yield _this.post(endpoint, payload);\n          } else {\n            throw new Error('Upload failed');\n          }\n        } catch (error) {\n          console.error('Upload error:', error);\n          throw error;\n        }\n      })();\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}